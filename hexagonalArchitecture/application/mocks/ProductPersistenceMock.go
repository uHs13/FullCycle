// Code generated by MockGen. DO NOT EDIT.
// Source: application/interface/ProductPersistenceInterface.go

// Package mock_application_interface is a generated GoMock package.
package mock_application_interface

import (
	application_interface "goHexagonal/application/interface"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductReaderInterface is a mock of ProductReaderInterface interface.
type MockProductReaderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductReaderInterfaceMockRecorder
}

// MockProductReaderInterfaceMockRecorder is the mock recorder for MockProductReaderInterface.
type MockProductReaderInterfaceMockRecorder struct {
	mock *MockProductReaderInterface
}

// NewMockProductReaderInterface creates a new mock instance.
func NewMockProductReaderInterface(ctrl *gomock.Controller) *MockProductReaderInterface {
	mock := &MockProductReaderInterface{ctrl: ctrl}
	mock.recorder = &MockProductReaderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductReaderInterface) EXPECT() *MockProductReaderInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProductReaderInterface) Get(id string) (application_interface.ProductInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(application_interface.ProductInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductReaderInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductReaderInterface)(nil).Get), id)
}

// MockProductWriterInterface is a mock of ProductWriterInterface interface.
type MockProductWriterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductWriterInterfaceMockRecorder
}

// MockProductWriterInterfaceMockRecorder is the mock recorder for MockProductWriterInterface.
type MockProductWriterInterfaceMockRecorder struct {
	mock *MockProductWriterInterface
}

// NewMockProductWriterInterface creates a new mock instance.
func NewMockProductWriterInterface(ctrl *gomock.Controller) *MockProductWriterInterface {
	mock := &MockProductWriterInterface{ctrl: ctrl}
	mock.recorder = &MockProductWriterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductWriterInterface) EXPECT() *MockProductWriterInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductWriterInterface) Create(id string, price float32) (application_interface.ProductInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", id, price)
	ret0, _ := ret[0].(application_interface.ProductInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductWriterInterfaceMockRecorder) Create(id, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductWriterInterface)(nil).Create), id, price)
}

// MockProductPersistenceInterface is a mock of ProductPersistenceInterface interface.
type MockProductPersistenceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductPersistenceInterfaceMockRecorder
}

// MockProductPersistenceInterfaceMockRecorder is the mock recorder for MockProductPersistenceInterface.
type MockProductPersistenceInterfaceMockRecorder struct {
	mock *MockProductPersistenceInterface
}

// NewMockProductPersistenceInterface creates a new mock instance.
func NewMockProductPersistenceInterface(ctrl *gomock.Controller) *MockProductPersistenceInterface {
	mock := &MockProductPersistenceInterface{ctrl: ctrl}
	mock.recorder = &MockProductPersistenceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductPersistenceInterface) EXPECT() *MockProductPersistenceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductPersistenceInterface) Create(id string, price float32) (application_interface.ProductInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", id, price)
	ret0, _ := ret[0].(application_interface.ProductInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProductPersistenceInterfaceMockRecorder) Create(id, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductPersistenceInterface)(nil).Create), id, price)
}

// Disable mocks base method.
func (m *MockProductPersistenceInterface) Disable(product application_interface.ProductInterface) (application_interface.ProductInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", product)
	ret0, _ := ret[0].(application_interface.ProductInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable indicates an expected call of Disable.
func (mr *MockProductPersistenceInterfaceMockRecorder) Disable(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockProductPersistenceInterface)(nil).Disable), product)
}

// Enable mocks base method.
func (m *MockProductPersistenceInterface) Enable(product application_interface.ProductInterface) (application_interface.ProductInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", product)
	ret0, _ := ret[0].(application_interface.ProductInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enable indicates an expected call of Enable.
func (mr *MockProductPersistenceInterfaceMockRecorder) Enable(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockProductPersistenceInterface)(nil).Enable), product)
}

// Get mocks base method.
func (m *MockProductPersistenceInterface) Get(id string) (application_interface.ProductInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(application_interface.ProductInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductPersistenceInterfaceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductPersistenceInterface)(nil).Get), id)
}
